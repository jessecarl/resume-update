// generated by jsonenums -type=PhoneType; DO NOT EDIT

package main

import (
	"encoding/json"
	"fmt"
)

var (
	_PhoneTypeNameToValue = map[string]PhoneType{
		"unknown": unknown,
		"mobile":  mobile,
		"home":    home,
		"office":  office,
		"other":   other,
	}

	_PhoneTypeValueToName = map[PhoneType]string{
		unknown: "unknown",
		mobile:  "mobile",
		home:    "home",
		office:  "office",
		other:   "other",
	}
)

func init() {
	var v PhoneType
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_PhoneTypeNameToValue = map[string]PhoneType{
			interface{}(unknown).(fmt.Stringer).String(): unknown,
			interface{}(mobile).(fmt.Stringer).String():  mobile,
			interface{}(home).(fmt.Stringer).String():    home,
			interface{}(office).(fmt.Stringer).String():  office,
			interface{}(other).(fmt.Stringer).String():   other,
		}
	}
}

// MarshalJSON is generated so PhoneType satisfies json.Marshaler.
func (r PhoneType) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _PhoneTypeValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid PhoneType: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so PhoneType satisfies json.Unmarshaler.
func (r *PhoneType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("PhoneType should be a string, got %s", data)
	}
	v, ok := _PhoneTypeNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid PhoneType %q", s)
	}
	*r = v
	return nil
}
